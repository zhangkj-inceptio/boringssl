#!/bin/bash

# Copyright 2017-2021 NXP
#
# SPDX-License-Identifier: BSD-3-Clause



secure_sign_image() {
    # $1: <machine>,  $2: <boottype>
    [ ! -f $FBDIR/configs/board/$1/manifest ] && echo $FBDIR/configs/board/$1/manifest not exist! && exit
    [ -f $PACKAGES_PATH/apps/security/cst/uni_sign ] || flex-builder -c cst -f $CFGLISTYML
    [ $MACHINE = ls1012afrwy ] && secfile=IMG7 || secfile=IMG4
    if ! grep -q ${secfile}_FILE_${2}_sec $FBDIR/configs/board/$1/manifest; then exit; fi
    . $FBDIR/configs/board/$1/manifest

    [ -f $FBOUTDIR/$distro_bootscript ] || flex-builder -i mkdistroscr -m $1 -a $DESTARCH -f $CFGLISTYML
    [ "$IMA_EVM" = y -a ! -f $FBOUTDIR/$bootscript_enforce ] && flex-builder -i mkdistroscr -t -m $1 -f $CFGLISTYML
    [ "$ENCAP" = y -a ! -f $FBOUTDIR/$bootscript_dec ] && flex-builder -i mkdistroscr -e -m $1 -f $CFGLISTYML

    [ ! -f $kernel_img ] && echo $kernel_img not exist, generating it ... && \
    flex-builder -c linux -p $SOCFAMILY -a $DESTARCH -f $CFGLISTYML

    [ ! -f $tiny_itb ] && flex-builder -i mkitb -r yocto:tiny -a $DESTARCH -p $SOCFAMILY -f $CFGLISTYML

    fbprint_n "Signing $2boot images for $1 ..."
    [ "$ENCAP" = y ] && cp $FBOUTDIR/$bootscript_dec $PACKAGES_PATH/apps/security/cst/bootscript_dec && echo "Copying bootscript_decap"

    if [ "$IMA_EVM" = y ]; then
	[ -f $FBOUTDIR/images/initramfs_imaevm_${DESTARCH}.img ] || \
	flex-builder -i mkrfs -r buildroot:imaevm -a $DESTARCH -f $CFGLISTYML
	cp -f $FBOUTDIR/images/initramfs_imaevm_${DESTARCH}.img $PACKAGES_PATH/apps/security/cst/initramfs.img && echo "Copying initramfs.img"
	cp -f $FBOUTDIR/$bootscript_enforce $PACKAGES_PATH/apps/security/cst/bootscript_enforce && echo "Copying bootscript_enforce"
    fi

    cd $PACKAGES_PATH/apps/security/cst && \
    rm -f bootscript uImage.dtb uImage.bin kernel.itb secboot_hdrs*.bin hdr*.out && \
    cp -f $FBOUTDIR/$distro_bootscript bootscript && echo "Copying bootscript" && \
    cp -f $FBOUTDIR/$device_tree uImage.dtb && echo "Copying dtb" && \
    cp -f $tiny_itb kernel.itb && echo "Copying linux tiny itb" && \
    cp -f $kernel_img uImage.bin && echo "Copying kernel" && cd -

    rcwimg_sec=`eval echo '${'"rcw_""$2"'_sec}'`
    rcwimg_nonsec=`eval echo '${'"rcw_""$2"'}'`
    if [ -z "$rcwimg_nonsec" ] || ! echo $rcwimg_nonsec | grep -q $1; then
	echo ${2}boot on $1 is not supported && return
    fi

    # for platform without ATF support
    if [ ${1:0:7} = ls1021a ]; then
	ubootimg_sec=`eval echo '${'"COMPOSITE_IMG1_FILE_""$2"'_sec}'`
	[ -f $FBOUTDIR/$ubootimg_sec ] || flex-builder -c u-boot -m $1 -b $2 -f $CFGLISTYML
	if [ $2 = nor ]; then
	    cp $FBOUTDIR/$ubootimg_sec $PACKAGES_PATH/apps/security/cst/u-boot-dtb.bin
	elif [ $2 = sd ]; then
	    cp -f $FBOUTDIR/$ubootimg_sec $PACKAGES_PATH/apps/security/cst/u-boot-with-spl-pbl.bin
	    cp -f $FBOUTDIR/$uboot_spl $PACKAGES_PATH/apps/security/cst/u-boot-spl.bin
	    cp -f $FBOUTDIR/$uboot_dtb $PACKAGES_PATH/apps/security/cst/u-boot-dtb.bin
	fi
    fi

    [ -f $pfe_fw ] || flex-builder -c pfe_bin -f $CFGLISTYML
    [ ${1:0:7} = ls1012a ] && cp $pfe_fw $PACKAGES_PATH/apps/security/cst/pfe.itb && echo "Copying PFE"

    if [ ${1:0:7} = ls1088a -o ${1:0:7} = ls2088a -o ${1:0:5} = lx216 ]; then
	[ -f $FBOUTDIR/$COMPOSITE_IMG11_FILE ] || flex-builder -c mc_bin -f $CFGLISTYML
	[ -f $FBOUTDIR/$COMPOSITE_IMG13_FILE ] || flex-builder -c mc_utils -f $CFGLISTYML
	cp -f $FBOUTDIR/$COMPOSITE_IMG11_FILE $PACKAGES_PATH/apps/security/cst/mc.itb
	cp -f $FBOUTDIR/$COMPOSITE_IMG12_FILE $PACKAGES_PATH/apps/security/cst/dpl.dtb
	cp -f $FBOUTDIR/$COMPOSITE_IMG13_FILE $PACKAGES_PATH/apps/security/cst/dpc.dtb
    fi
    mkdir -p  $FBOUTDIR/firmware/secboot_hdrs/$1
    cd $PACKAGES_PATH/apps/security/cst
    if [ $2 = nand -a -n "$nand_script" ]; then
	. $nand_script
    elif [ $2 = sd -o $2 = emmc ] && [ -n "$sd_script" ]; then
	. $sd_script
    elif [ $2 = nor -a -n "$nor_script" ]; then
	. $nor_script
    elif [ $2 = qspi -a -n "$qspi_script" ]; then
	. $qspi_script
    elif [ $2 = xspi -a -n "$xspi_script" ]; then
	. $xspi_script
    fi

    if [ ${1:0:7} = ls1028a ]; then
	cp -f $PACKAGES_PATH/apps/security/cst/secboot_hdrs.bin $FBOUTDIR/firmware/secboot_hdrs/$1/secboot_hdrs_${2}boot.bin
    else
	cp -f $PACKAGES_PATH/apps/security/cst/secboot_hdrs_${2}boot.bin $FBOUTDIR/firmware/secboot_hdrs/$1
    fi

    if [ ${1:0:7} = ls1021a -a $2 = sd ]; then
	cp -f $PACKAGES_PATH/apps/security/cst/u-boot-with-spl-pbl-sec.bin $FBOUTDIR/$ubootimg_sec
    fi

    cp -f $PACKAGES_PATH/apps/security/cst/hdr_dtb.out $FBOUTDIR/firmware/secboot_hdrs/$1
    cp -f $PACKAGES_PATH/apps/security/cst/hdr_linux.out $FBOUTDIR/firmware/secboot_hdrs/$1
    [ $1 = ls1012afrwy ] && cp $PACKAGES_PATH/apps/security/cst/hdr_kernel.out $FBOUTDIR/firmware/secboot_hdrs/$1
    cp  $PACKAGES_PATH/apps/security/cst/hdr_bs.out $FBOUTDIR/firmware/secboot_hdrs/$1/hdr_${1}_bs.out
    cp -f $PACKAGES_PATH/apps/security/cst/srk_hash.txt $FBOUTDIR/images
    cp -f $PACKAGES_PATH/apps/security/cst/srk.pri $FBOUTDIR/images
    cp -f $PACKAGES_PATH/apps/security/cst/srk.pub $FBOUTDIR/images
    [ "$ENCAP" = y ] && cp -f $PACKAGES_PATH/apps/security/cst/hdr_bs_dec.out \
    $FBOUTDIR/firmware/secboot_hdrs/$1/hdr_${1}_bs_dec.out
    if [ "$IMA_EVM" = y ]; then
	cp -f $PACKAGES_PATH/apps/security/cst/hdr_bs_enf.out $FBOUTDIR/firmware/secboot_hdrs/$1/hdr_${1}_bs_enf.out
	cp -f $PACKAGES_PATH/apps/security/cst/hdr_initramfs.out $FBOUTDIR/firmware/secboot_hdrs/$1/
    fi

    fbprint_d "sign image for $1 ${2}boot"
}

