#!/bin/bash

# Copyright 2017-2021 NXP
#
# SPDX-License-Identifier: BSD-3-Clause



generate_bootpartition_tarball() {
    # check kernel image
    [ -f $KERNEL_PATH/Makefile ] || flex-builder -i repo-fetch -B linux -f $CFGLISTYML
    curbrch=`cd $KERNEL_PATH && git branch | grep ^* | cut -d' ' -f2`
    [ ! -f $kernel_img -o ! -f $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release ] && \
    echo Building the dependent $kernel_img ... && \
    flex-builder -c linux-deb -p $SOCFAMILY -a $DESTARCH -f $CFGLISTYML

    [ -f $tiny_itb ] || flex-builder -i mklinux -r yocto:tiny -a $DESTARCH -p $SOCFAMILY -f $CFGLISTYML

    bootpartname=boot_${SOCFAMILY}_${DESTARCH}
    bootpartdir=$FBOUTDIR/images/$bootpartname
    mkdir -p $bootpartdir

    [ $SOCFAMILY = IMX ] && socseries=im
    [ $SOCFAMILY = LS  ] && socseries=l
    [ -f  $FBOUTDIR/images/rootfs_${DISTRIB_VERSION}_yocto_${DISTROSCALE}_${DESTARCH}.cpio.gz ] && \
    cp -f $FBOUTDIR/images/rootfs_${DISTRIB_VERSION}_yocto_${DISTROSCALE}_${DESTARCH}.cpio.gz $bootpartdir

    fbprint_n "Installing kernel and dtb ..."
    cp -f $tiny_itb $bootpartdir
    kernelrelease=$(cat $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release)
    [ $DESTARCH = arm64 ] && kernelimg=Image* || kernelimg=zImage*
    cp -f $FBOUTDIR/linux/kernel/$DESTARCH/$SOCFAMILY/{*.dtb,$kernelimg,config-$kernelrelease} $bootpartdir
    if [ $DESTARCH = arm64 ]; then
	cp -f $FBOUTDIR/linux/kernel/$DESTARCH/$SOCFAMILY/vmlinuz-$kernelrelease $bootpartdir
    elif [ $DESTARCH = arm32 ]; then
	cp -f $FBOUTDIR/linux/kernel/$DESTARCH/$SOCFAMILY/uImage* $bootpartdir
    fi

    # install kernel modules
    fbprint_n "Installing kernel modules ..."
    cp -rf $KERNEL_OUTPUT_PATH/$curbrch/tmp/lib/modules $bootpartdir
    modversion=$(ls $KERNEL_OUTPUT_PATH/$curbrch/tmp/lib/modules)
    rm -f $bootpartdir/modules/$modversion/{build,source}
    ln -sf /usr/src/linux-headers-$modversion $bootpartdir/modules/$modversion/build
    ln -sf /usr/src/linux  $bootpartdir/modules/$modversion/source

    # install distro boot script
    fbprint_n "Installing distro boot script ..."
    if [ $DESTARCH = arm64 -a $SOCFAMILY = LS ]; then
	socseries=l; scrmask="-v -E ls1021atwr"
    elif [ $DESTARCH = arm32 -a $SOCFAMILY = LS ]; then
	socseries=l; scrmask="-E ls1021atwr"
    elif [ $DESTARCH = arm64 -a $SOCFAMILY = IMX ]; then
	socseries=imx*; scrmask="-E imx8"
    elif [ $DESTARCH = arm32 -a $SOCFAMILY = IMX ]; then
	socseries=imx*; scrmask="-v -E imx8"
    fi
    if [ $MACHINE = all ]; then
	if ! realpath $FBOUTDIR/firmware/u-boot/*/*_boot.scr 1>/dev/null 2>&1; then
	    flex-builder -i mkdistroscr -a $DESTARCH -p $SOCFAMILY -f $CFGLISTYML
	fi
    else
	if ! realpath $FBOUTDIR/firmware/u-boot/*/${MACHINE:0:9}_boot.scr 1>/dev/null 2>&1; then
	    flex-builder -i mkdistroscr -m $MACHINE -a $DESTARCH -p $SOCFAMILY -f $CFGLISTYML
	fi
    fi

    ls $FBOUTDIR/firmware/u-boot/$socseries*/*boot.scr | grep $scrmask | xargs -I {} cp -v {} $bootpartdir

    # check UEFI
    if [ "$CONFIG_FW_UEFI_BIN" = y -a $SOCFAMILY = LS -a $DESTARCH = arm64 ]; then
	generate_uefi_grub_cfg
	mkdir -p $bootpartdir/grub
	find  $FBOUTDIR/firmware/uefi/ -name "*grub.cfg" | xargs -I {} cp {} $bootpartdir/grub
	[ -f $FBOUTDIR/firmware/uefi/grub/BOOTAA64.EFI ] || flex-builder -c uefi_bin -f $CFGLISTYML
	cp $FBOUTDIR/firmware/uefi/grub/BOOTAA64.EFI $bootpartdir/grub
    fi

    # secure boot headers
    if [ $SOCFAMILY = LS ]; then
	[ -n "$BOOTTYPE" ] && boottype=$BOOTTYPE
	for brd in $machinelist; do
	    flex-builder -i signimg -m $brd -a $DESTARCH -f $CFGLISTYML
	done
	cp -rf $FBOUTDIR/firmware/secboot_hdrs $bootpartdir
	ls $FBOUTDIR/firmware/secboot_hdrs/*/*bs.out | grep $scrmask | xargs -I {} cp {} $bootpartdir
    fi

    # check IMA/EVM
    if [ "$IMA_EVM" = y -a $SOCFAMILY = LS ]; then
	[ -f $FBOUTDIR/images/initramfs_imaevm_${DESTARCH}.img ] || \
	flex-builder -i mkrfs -r buildroot:imaevm -a $DESTARCH -f $CFGLISTYML

	cp -f $FBOUTDIR/images/initramfs_imaevm_${DESTARCH}.img $bootpartdir/initramfs.img
	for brd in $LS_MACHINE_LIST; do
	    [ -f $FBOUTDIR/firmware/u-boot/$brd/${brd}_enforce_boot.scr ] && \
	    cp -f $FBOUTDIR/firmware/u-boot/$brd/${brd}_enforce_boot.scr $bootpartdir
	done
    fi

    # install flash images to bootpartition if INSTALL_FLASH_IMAGES=y is enabled
    if [ "$INSTALL_FLASH_IMAGES" = y -a $SOCFAMILY = LS ]; then
	for brd in $machinelist; do
	    mkdir -p $bootpartdir/flash_images/$brd
	    for bt in qspi xspi nor; do
		[ -f $FBOUTDIR/images/firmware_${brd}_${bt}boot.img ] && \
		cp -f $FBOUTDIR/images/firmware_${brd}_${bt}boot.img $bootpartdir
	    done

	    [ -f $FBOUTDIR/firmware/.binfwdone ] || flex-builder -c bin_firmware -f $CFGLISTYML

	    # atf
	    [ -f $FBOUTDIR/firmware/atf/$brd/fip_uboot.bin ] && \
	    cp -f $FBOUTDIR/firmware/atf/$brd/* $bootpartdir/flash_images/$brd/
	    [ $brd = ls1088ardb -a -f $FBOUTDIR/firmware/atf/ls1088ardb_pb/fip_uboot.bin ] && \
	    cp -f $FBOUTDIR/firmware/atf/ls1088ardb_pb/* $bootpartdir/flash_images/$brd

	    # ddr phy
	    [ -f $FBOUTDIR/firmware/ddr_phy_bin/fip_ddr_all.bin -a ${brd:0:5} = lx216 ] && \
	    cp -f $FBOUTDIR/firmware/ddr_phy_bin/fip_ddr_all.bin $bootpartdir/flash_images/$brd
	    
	    # fman and QE
	    cp -f $FBOUTDIR/firmware/fm_ucode/*ls104* $bootpartdir/flash_images
	    cp -f $FBOUTDIR/firmware/qe_ucode/iram_Type*.bin $bootpartdir/flash_images

	    # dp firmware
	    [ ${brd:0:7} = ls1028a ] && cp -f $FBOUTDIR/firmware/dp_firmware_cadence/dp/ls1028a-dp-fw.bin $bootpartdir/flash_images

	    # pfe
	    [ ${brd:0:7} = ls1012a ] && cp -f $FBOUTDIR/firmware/pfe_bin/ls1012a/u-boot/pfe_fw_sbl.itb $bootpartdir/flash_images

	    # DPAA2-MC
	    if [ ${brd:0:7} = ls1088a -o ${brd:0:7} = ls2088a -o ${brd:0:5} = lx216 ]; then
		[ $brd = lx2160ardb_rev2 ] && socname=${brd::-8} || socname=${brd::-3}
		[ $brd = ls1088ardb_pb ] && socname=${brd::-6}
		[ ${brd:0:5} = lx216 ] && tmpdir=lx216xa || tmpdir=$socname
		cp -f $FBOUTDIR/firmware/mc_bin/$tmpdir/mc*.itb $bootpartdir/flash_images/$brd
		[ $brd = lx2162aqds ] && tmpdir=$socname/*-QDS || tmpdir=$socname/*-RDB
		find $FBOUTDIR/firmware/mc_utils/config/$tmpdir -name *.dtb | xargs -I {} cp {} $bootpartdir/flash_images/$brd
	    fi

	    # phy_cortina
	    cp -f $FBOUTDIR/firmware/phy_cortina/*PHY-ucode* $bootpartdir/flash_images

	    # phy_inphi
	    cp -f $FBOUTDIR/firmware/phy_inphi/in112525-phy-ucode.txt $bootpartdir/flash_images
	done
	[ -f $FBOUTDIR/images/flash_images.scr ] || flex-builder -i mkflashscr -f $CFGLISTYML
	cp -f $FBOUTDIR/images/flash_images.scr $bootpartdir
    fi

    # install kernel tools/perf
    [ $DESTARCH = arm64 -a ! -f $FBOUTDIR/linux/kernel/$DESTARCH/$SOCFAMILY/perf ] && flex-builder -c perf -f $CFGLISTYML
    [ -f $FBOUTDIR/linux/kernel/$DESTARCH/$SOCFAMILY/perf ] && mkdir -p $bootpartdir/tools && \
    cp -f $FBOUTDIR/linux/kernel/$DESTARCH/$SOCFAMILY/perf $bootpartdir/tools

    majorver=`grep "^VERSION =" $KERNEL_PATH/Makefile | cut -d' ' -f3`
    subver=`grep "^PATCHLEVEL =" $KERNEL_PATH/Makefile | cut -d' ' -f3`
    kernelver=$majorver.$subver
    [ -f $FBOUTDIR/images/srk_hash.txt -a $SOCFAMILY = LS ] && cp $FBOUTDIR/images/srk_hash.txt $bootpartdir
    boottarball=${bootpartname}_lts_${kernelver}${imaevmopt}_`date +%Y%m%d%H%M`
    echo $boottarball > $bootpartdir/buildinfo
    cd $bootpartdir && tar czf ../$boottarball.tgz *
    cd $FBOUTDIR/images && rm -rf ${bootpartname}_lts_${kernelver}${imaevmopt}
    mv $bootpartname ${bootpartname}_lts_${kernelver}${imaevmopt}
    ln -sf $boottarball.tgz ${bootpartname}_lts_${kernelver}${imaevmopt}.tgz

    fbprint_d $FBOUTDIR/images/$boottarball.tgz
}
